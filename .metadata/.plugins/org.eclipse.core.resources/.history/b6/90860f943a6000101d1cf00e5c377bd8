package viewModels;

import java.util.Observable;
import java.util.Observer;

import javax.swing.event.TableModelEvent;
import javax.swing.table.AbstractTableModel;

import network.ClientInformation;
import network.RMIClient;
import network.RMIServer;

public class ActualSquadTableModel extends AbstractTableModel implements Observer {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    private String[] columns = { "Athlet ID", "Vorname", "Nachname","Jahrgang", "Leistungsklasse","Note","aktuelle Bewertung"};
    private final RMIClient rmiClient;

    public ActualSquadTableModel(RMIClient rmiClient) {
	this.rmiClient = rmiClient;
	this.rmiClient.addObserver(this);
    }

    @Override
    public int getColumnCount() {
	return columns.length;
    }

    @Override
    public int getRowCount() {
	if (rmiClient != null) {
	    return rmiServer.getClientsWaitingForAllocation().size();
	} else {
	    return 0;
	}
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
	ClientInformation client = rmiServer.getClientsWaitingForAllocation().get(rowIndex);

	switch (columnIndex) {
	case 0:
	    return client.getHost();
	case 1:
	    return client.getDeviceType();
	}
	return "";
    }

    @Override
    public void update(Observable arg0, Object arg1) {
	fireTableChanged(new TableModelEvent(this, TableModelEvent.INSERT));
    }

}
